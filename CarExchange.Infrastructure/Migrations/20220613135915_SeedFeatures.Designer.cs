// <auto-generated />
using System;
using CarExchange.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarExchange.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220613135915_SeedFeatures")]
    partial class SeedFeatures
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("CarExchange.Infrastructure.Data.Models.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("Bodystyle")
                        .HasColumnType("integer");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(325)
                        .HasColumnType("character varying(325)");

                    b.Property<string>("Engine")
                        .HasColumnType("text");

                    b.Property<int>("Fuel")
                        .HasColumnType("integer");

                    b.Property<byte>("Gears")
                        .HasColumnType("smallint");

                    b.Property<short>("HorsePower")
                        .HasColumnType("smallint");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("boolean");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("integer");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("Seats")
                        .HasColumnType("smallint");

                    b.Property<int>("Transmission")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarExchange.Infrastructure.Data.Models.Feature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CarId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = "ec5eba28-d1c2-481d-aad9-f70cfaab95dd",
                            Name = "Leather seats"
                        },
                        new
                        {
                            Id = "b8ce9dea-4e68-4492-989c-77b815503eb1",
                            Name = "Bluetooth"
                        },
                        new
                        {
                            Id = "6e040908-5d77-4462-a3d5-f90b4d9b7849",
                            Name = "Parking Sensors"
                        },
                        new
                        {
                            Id = "5fbdc6e8-20ef-49fd-a7f2-dadc53def7a8",
                            Name = "LED lights"
                        },
                        new
                        {
                            Id = "efe890d8-e7a4-41a3-a45a-adf3ee0b18df",
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = "afb9b2f6-ecda-4a62-b173-c013a0be9b89",
                            Name = "Side Airbags"
                        },
                        new
                        {
                            Id = "ee88e9b0-b98a-4ca0-a520-789cab1b3f52",
                            Name = "Navigation system"
                        },
                        new
                        {
                            Id = "cd2507c1-766b-4852-bda9-ebf56a587167",
                            Name = "USB"
                        },
                        new
                        {
                            Id = "83ea7719-a6f6-42d6-bf56-823a64a3a1a4",
                            Name = "Lane Assist"
                        },
                        new
                        {
                            Id = "ae0ee0f4-b230-4cd7-93d8-3e7e75c8e8f4",
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = "80af5358-9fd3-477f-9618-e7e713618489",
                            Name = "Front Fog Lights"
                        },
                        new
                        {
                            Id = "8a1a7eac-60e6-48a2-889f-8e6387a5bbfc",
                            Name = "Leather Saloon"
                        },
                        new
                        {
                            Id = "1a28eea6-8159-42fa-9389-588e32dd94e7",
                            Name = "Seat - Height Adjustment"
                        },
                        new
                        {
                            Id = "d6f58d6c-83f6-44d1-9b6a-205be04fb447",
                            Name = "Alarm"
                        },
                        new
                        {
                            Id = "d6f58d6c-83f6-k1d1-y56a-205be04fb447",
                            Name = "ABS"
                        },
                        new
                        {
                            Id = "c6a58d6s-38f6-44d1-9b6a-209be04fbi43",
                            Name = "Heater rear window"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CarExchange.Infrastructure.Data.Models.Feature", b =>
                {
                    b.HasOne("CarExchange.Infrastructure.Data.Models.Car", null)
                        .WithMany("Features")
                        .HasForeignKey("CarId");
                });

            modelBuilder.Entity("CarExchange.Infrastructure.Data.Models.Car", b =>
                {
                    b.Navigation("Features");
                });
#pragma warning restore 612, 618
        }
    }
}
